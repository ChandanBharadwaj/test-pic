import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import java.util.List;

public class SqlDataUpdator<T> {

    private final JdbcTemplate jdbcTemplate;
    private final PlatformTransactionManager transactionManager;
    private final int batchSize;
    private List<T> data;
    private String updateQuery;
    private BatchParameterSetter<T> parameterSetter;

    private SqlDataUpdator(Builder<T> builder) {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setUrl(builder.url);
        dataSource.setUsername(builder.username);
        dataSource.setPassword(builder.password);
        dataSource.setDriverClassName(builder.driverClassName);

        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.transactionManager = new org.springframework.jdbc.datasource.DataSourceTransactionManager(dataSource);
        this.batchSize = builder.batchSize;
        this.data = builder.data;
        this.updateQuery = builder.updateQuery;
        this.parameterSetter = builder.parameterSetter;
    }

    public static <T> Builder<T> builder() {
        return new Builder<>();
    }

    public void execute() {
        if (data == null || updateQuery == null || parameterSetter == null) {
            throw new IllegalStateException("Data, update query, and parameter setter must be provided before execution.");
        }

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("BatchUpdateTransaction");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = transactionManager.getTransaction(def);

        try {
            for (int i = 0; i < data.size(); i += batchSize) {
                int toIndex = Math.min(i + batchSize, data.size());
                List<T> batch = data.subList(i, toIndex);

                // Execute updates in batch
                for (T item : batch) {
                    jdbcTemplate.update(updateQuery, ps -> parameterSetter.setParameters(ps, item));
                }
            }

            // Commit the transaction after all batches are processed
            transactionManager.commit(status);
        } catch (Exception e) {
            transactionManager.rollback(status);
            throw new RuntimeException("Failed to update data in batches. Transaction rolled back.", e);
        }
    }

    public interface BatchParameterSetter<T> {
        void setParameters(java.sql.PreparedStatement ps, T item) throws Exception;
    }

    public static class Builder<T> {
        private String url;
        private String username;
        private String password;
        private String driverClassName;
        private int batchSize = 100; // Default batch size
        private List<T> data;
        private String updateQuery;
        private BatchParameterSetter<T> parameterSetter;

        public Builder<T> url(String url) {
            this.url = url;
            return this;
        }

        public Builder<T> username(String username) {
            this.username = username;
            return this;
        }

        public Builder<T> password(String password) {
            this.password = password;
            return this;
        }

        public Builder<T> driverClassName(String driverClassName) {
            this.driverClassName = driverClassName;
            return this;
        }

        public Builder<T> batchSize(int batchSize) {
            this.batchSize = batchSize;
            return this;
        }

        public Builder<T> data(List<T> data) {
            this.data = data;
            return this;
        }

        public Builder<T> updateQuery(String updateQuery) {
            this.updateQuery = updateQuery;
            return this;
        }

        public Builder<T> parameterSetter(BatchParameterSetter<T> parameterSetter) {
            this.parameterSetter = parameterSetter;
            return this;
        }

        public SqlDataUpdator<T> build() {
            if (url == null || username == null || password == null || driverClassName == null) {
                throw new IllegalStateException("All database connection details must be provided.");
            }
            return new SqlDataUpdator<>(this);
        }

        public void execute() {
            build().execute();
        }
    }
}
